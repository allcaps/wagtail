import json
import os
import socket
import time

from django.conf import settings
from django.contrib.auth import get_user_model
from django.contrib.staticfiles.testing import StaticLiveServerTestCase
from django.core.files.base import ContentFile
from django.template.defaultfilters import slugify
from django.test import override_settings
from django.urls import reverse
from selenium import webdriver
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.keys import Keys

from generator.models import BlogPage, StandardPage
from wagtail.core.models import Page
from wagtail.images import get_image_model

from .documentation_factory import DocumentationFactory
from .driver import DriverWithShortcuts

# Minimal adjustments to the settings generated by `wagtail start snapsite`
test_settings = {
    "STATICFILES_FINDERS": [
        "django.contrib.staticfiles.finders.AppDirectoriesFinder",
        "django.contrib.staticfiles.finders.FileSystemFinder",
    ],
    "STATICFILES_STORAGE": "django.contrib.staticfiles.storage.StaticFilesStorage",
    "WAGTAIL_SITE_NAME": "Acme Inc",
}


def create_pages(parent, pages):
    for key, val in pages.items():
        page = val["type"](title=key, slug=slugify(key))
        parent.add_child(instance=page)
        page.save_revision().publish()
        if val.get("children"):
            create_pages(page, val["children"])


class TestEditorManual(StaticLiveServerTestCase):
    host = "0.0.0.0"

    @classmethod
    def setUpClass(cls):
        super().setUpClass()
        cls.host = socket.gethostbyname(socket.gethostname())

        options = webdriver.ChromeOptions()
        # options.add_argument("--headless")
        options.add_argument("--no-sandbox")  # Bypass OS security model
        options.add_argument("--force-device-scale-factor=2")

        cls.driver = DriverWithShortcuts(
            # command_executor=f'http:/{socket.gethostbyname(socket.gethostname())}:4444/wd/hub/',
            desired_capabilities=webdriver.DesiredCapabilities.CHROME,
            options=options,
        )
        cls.driver.implicitly_wait(5)
        cls.driver.set_window_size(1024, 768)

    @classmethod
    def tearDownClass(cls):
        cls.driver.quit()
        super().tearDownClass()

    @override_settings(**test_settings)
    def test_screenshots(self):
        driver = self.driver
        base_url = self.live_server_url

        with DocumentationFactory(
            "documentation_factory_demo.rst", "Introduction", driver, scale_factor=2
        ) as doc:
            doc.comment("This RST file is for demo purposes only.")
            doc.h2("Heading level two")
            doc.p("This is a paragraph.")
            doc.ul(["Foo", "Bar", "Ni", ["This is", "a nested", "list"]])
            doc.ol(["One", "Two", "Three"])

            # screen01_login.png
            username, password = "tom", "secret_password"
            tom = get_user_model().objects.create_superuser(
                username=username,
                password=password,
                is_active=True,
                email=f"{username}@example.com",
                first_name=username.title(),
            )
            assert get_user_model().objects.count() == 1
            url = base_url + reverse("wagtailadmin_login")
            driver.get(url)
            driver.input_text("username", username)
            driver.input_text("password", password)
            doc.img("screen01_login.png", driver.find_element_by_xpath(f"//button"))
            driver.find_element_by_xpath("//button").click()

            # README.md
            home = Page.objects.get(slug="home")
            url = base_url + reverse("wagtailadmin_pages:add_subpage", args=(home.id,))
            driver.get(url)
            driver.click_link("Standard page")
            driver.input_text("title", "Hello Wagtail")
            driver.set_window_size(1024, 768 + 20)
            directory = os.path.join(settings.BASE_DIR, "..", "..", "..", ".github")
            doc.img(
                "wagtail-screenshot-with-browser.png", directory=directory, browser=True
            )

            doc.img("screen00_intro.png", browser=True)
            driver.set_window_size(1024, 768)

            # Fixture
            pages = {
                "Events": {
                    "type": StandardPage,
                    "children": {
                        "Code sprint Bristol": {"type": StandardPage},
                        "Code sprint Reykjav√≠k": {"type": StandardPage},
                        "Wagtail Space": {"type": StandardPage},
                    },
                },
                "Blog": {
                    "type": StandardPage,
                    "children": {
                        "Richtext vs Streamfields": {"type": BlogPage},
                        "Python, Django, Wagtail": {"type": BlogPage},
                        "Wagtail is awesome": {"type": BlogPage},
                    },
                },
                "People": {
                    "type": StandardPage,
                    "children": {
                        "Tom": {"type": StandardPage},
                        "Lisa": {"type": StandardPage},
                        "Simon": {"type": StandardPage},
                    },
                    "Contact": {"type": StandardPage},
                },
            }
            create_pages(home, pages)
            team = StandardPage.objects.get(slug="people")
            team.title = "Team"
            team.slug = "team"
            team.save_revision(user=tom)  # Draft

            # screen02_dashboard_editor.png
            victoria = get_user_model().objects.create(
                username="victoria",
                password=password,
                is_active=True,
                email=f"{username}@example.com",
                first_name="Victoria",
            )
            wagtail_is_awesome = Page.objects.get(title="Wagtail is awesome")
            wagtail_is_awesome.title = "Wagtail is Awesome"
            wagtail_is_awesome.save_revision(
                user=victoria, submitted_for_moderation=True
            )

            url = base_url + reverse("wagtailadmin_home")
            driver.get(url)
            doc.img("screen02_dashboard_editor.png")

            # screen03_explorer_menu.png
            driver.get(base_url + reverse("wagtailadmin_home"))
            driver.click_link("Pages")
            driver.find_element_by_class_name("icon-arrow-right").click()
            time.sleep(0.3)  # Wait for the animation to finish
            doc.img("screen03_explorer_menu.png")

            # screen04_search_screen.png
            url = base_url + reverse("wagtailadmin_pages:search")
            driver.get(url)
            elm = driver.find_element_by_id("id_q")
            elm.send_keys("Wagt")
            time.sleep(0.1)
            doc.img("screen04_search_screen.png", elm)

            # userbar-corner.png
            driver.get(base_url)
            driver.find_element_by_class_name("wagtail-userbar-trigger").click()
            driver.execute_script(
                "elm = document.getElementsByTagName('footer')[0];elm.parentNode.removeChild(elm);"
            )
            time.sleep(0.1)
            doc.crop(
                "userbar-corner.png",
                element=driver.find_element_by_class_name("wagtail-userbar-items"),
                padding=(25, 25, 130, 35),
            )

            # screen05_explorer_page.png
            url = base_url + reverse("wagtailadmin_explore", args=(home.id,))
            driver.get(url)
            doc.img("screen05_explorer_page.png")

            # screen06_explorer_page_arrow.png
            elm = driver.find_element_by_xpath(
                '//*[@id="page-reorder-form"]/table/tbody/tr[3]/td[6]'
            )
            actions = ActionChains(driver).move_to_element(elm)
            actions.perform()
            doc.img("screen06_explorer_page_arrow.png", elm)

            # screen07_explorer_page_breadcrumb.png
            url = base_url + reverse(
                "wagtailadmin_explore", args=(wagtail_is_awesome.id,)
            )
            driver.get(url)
            doc.img(
                "screen07_explorer_page_breadcrumb.png",
                driver.find_element_by_class_name("breadcrumb"),
            )

            # screen08.5_reorder_page_handles.png
            url = base_url + reverse("wagtailadmin_explore", args=(home.id,))
            driver.get(url)
            elm = driver.find_element_by_xpath(
                '//*[@id="page-reorder-form"]/table/thead/tr[2]/th[1]/a'
            )
            elm.click()
            doc.img(
                "screen08.5_reorder_page_handles.png",
                driver.find_element_by_xpath(
                    '//*[@id="page-reorder-form"]/table/thead/tr[2]/th[1]/a'
                ),
            )

            # screen08_add_page_button.png
            elm = driver.find_element_by_link_text("ADD CHILD PAGE")
            doc.img("screen08_add_page_button.png", elm)
            elm.click()

            # screen09_page_type_selection.png
            elm = driver.find_element_by_link_text("Standard page")
            doc.img("screen09_page_type_selection.png", elm)
            elm.click()

            # screen10_blank_page_edit_screen.png
            elm = driver.find_element_by_name("title")
            title = "Acme picks Wagtail CMS"
            driver.input_text("title", title)
            doc.img("screen10_blank_page_edit_screen.png", elm)

            # screen11_empty_streamfield.png
            driver.scroll_to_bottom()
            elm = driver.find_element_by_class_name("action-add-block-paragraph")
            streamfield = driver.find_element_by_class_name("stream-field")
            doc.img("screen11_empty_streamfield.png", streamfield)
            elm.click()

            # screen11.1_streamfield_richtext.png
            time.sleep(0.3)  # Wait for the animation to finish
            page = StandardPage(
                title=title,
                body=json.dumps(
                    [
                        {
                            "type": "paragraph",
                            "value": "<p>We'd <b>love</b> to hear from you! "
                            '<a href="https://wagtail.io/">Drop us a line</a> '
                            "to let us know what you think!</p>",
                            "id": "f65d1232-322d-4efc-a6f7-d0b73143b405",
                        }
                    ]
                ),
            )
            home.add_child(instance=page)
            page.save_revision().publish()
            url = base_url + reverse("wagtailadmin_pages:edit", args=(page.id,))
            driver.get(url)
            driver.scroll_to_bottom()
            doc.img("screen11.1_streamfield_richtext.png")

            # screen11.2_toolbar_tooltips.png
            actions = ActionChains(driver)
            actions.move_to_element(
                driver.find_element_by_name("header-three")
            )  # hover
            actions.perform()
            time.sleep(1)  # Wait for the animation to finish
            doc.crop(
                "screen11.2_toolbar_tooltips.png",
                driver.find_element_by_class_name("c-sf-block__content"),
            )

            # screen11.8_adding_new_blocks.png
            driver.find_element_by_id("body-0-appendmenu-openclose").click()
            time.sleep(0.3)
            driver.scroll_to_bottom()
            stream_field = driver.find_element_by_class_name("stream-field")
            doc.img("screen11.8_adding_new_blocks.png", stream_field)

            # screen11.9_streamfield_reordering.png
            elm = driver.find_element_by_class_name("c-sf-block__actions")
            doc.img("screen11.9_streamfield_reordering.png", elm)

            # screen11.3_keyboard_shortcuts_.gif
            # GIF animation. Skip.

            # screen12_edit_screen_overview.png
            python_django_wagtail = Page.objects.get(slug="python-django-wagtail")
            url = base_url + reverse(
                "wagtailadmin_pages:edit", args=(python_django_wagtail.id,)
            )
            driver.get(url)
            doc.img("screen12_edit_screen_overview.png")

            # screen14_add_main_image.png
            driver.scroll_to_bottom()
            elm = driver.find_element_by_class_name("model_choice_field")
            doc.crop("screen14_add_main_image.png", elm)

            # screen16_selecting_image_from_library.png
            image_model = get_image_model()
            for filename, title in [
                ("delaney-van-EUVN4bihZug-unsplash.jpg", "Owl"),
                ("jake-nackos-GxYYBY_9Ggk-unsplash.jpg", "Flamingo"),
                ("max-kleinen-Cu13_98qj38-unsplash.jpg", "Heron"),
            ]:
                with open(f"tests/images/{filename}", "rb") as img_file:
                    img = image_model(
                        file=ContentFile(img_file.read(), name=filename), title=title
                    )
                    img.save()

            driver.click_button("Choose an image")
            time.sleep(1)
            doc.img("screen16_selecting_image_from_library.png")

            # screen17_upload_image.png
            driver.find_element_by_xpath(
                '//*[@id="wagtail"]/div[4]/div/div/div/ul/li[2]/a'
            ).click()
            driver.input_text("image-chooser-upload-title", "Owl")

            elm = driver.find_element_by_class_name("ui-autocomplete-input")
            elm.send_keys("bird")
            actions = ActionChains(driver)
            actions.send_keys(Keys.TAB)
            actions.perform()
            doc.img("screen17_upload_image.png")

            # screen18_image_format.png
            driver.find_element_by_class_name("close").click()
            time.sleep(0.3)
            driver.find_element_by_xpath("//button[@name='IMAGE']").click()
            time.sleep(0.3)
            driver.find_element_by_xpath("//a[@title='Heron']").click()
            driver.update_input_text(
                "image-chooser-insertion-alt_text", "Heron at the waterside"
            )
            doc.img("screen18_image_format.png")

            # screen19_link.png
            url = base_url + reverse(
                "wagtailadmin_pages:edit", args=(python_django_wagtail.id,)
            )
            driver.get(url)
            elm = driver.find_element_by_class_name("icon-link")
            actions = ActionChains(driver)
            actions.move_to_element(elm)  # hover
            actions.perform()
            time.sleep(1)  # Wait for the animation to finish
            doc.crop(
                "screen19_link.png",
                driver.find_element_by_class_name("Draftail-Editor__wrapper"),
                padding=(0, 0, 40, 0),
            )

            # screen19_link_form.png
            elm.click()
            time.sleep(0.3)
            doc.img("screen19_link_form.png")

            # screen20_insert_video_form.png
            url = base_url + reverse(
                "wagtailadmin_pages:edit", args=(python_django_wagtail.id,)
            )
            driver.get(url)
            driver.find_element_by_class_name("icon-media").click()
            driver.find_element_by_id("id_embed-chooser-url").send_keys(
                "https://vimeo.com/86036070"
            )
            time.sleep(1)
            doc.img("screen20_insert_video_form.png")

            # screen21_video_in_editor.png
            driver.find_element_by_xpath("//*[@id='form']/form/ul/li[2]/button").click()
            time.sleep(1)
            driver.execute_script("window.scrollTo(0, 200);")
            doc.img(
                "screen21_video_in_editor.png",
                driver.find_element_by_class_name("draftail_rich_text_area"),
            )

            # screen13_publish_menu.png
            url = base_url + reverse("wagtailadmin_pages:edit", args=(team.id,))
            driver.get(url)
            elm = driver.find_element_by_class_name("icon-arrow-up")
            elm.click()
            driver.execute_script("window.scrollTo(0, 100);")
            time.sleep(0.3)
            doc.img("screen13_publish_menu.png", element=elm)

            # screen15_carousel_form.png
            # screen22_required_field.png
            # screen23_validation_error.png
            # screen24_multiple_items_closed.png
            # screen25_multiple_items_open.png
            # screen26.5_promote_tab.png
            # screen26_reordering_multiple_items.png
            # screen27_docs_icon.png
            # screen28_docs_form.png
            # screen29_documents_page.png
            # screen30_documents_edit_page.png
            # screen31_images_page.png
            # screen32_image_edit_page.png
            # screen33_snippet_menu.png
            # screen34_snippet_used_times.png
            # screen35_users_menu_item.png
            # screen36_users_interface.png
            # screen37_promoted_menu_item.png
            # screen38.5_popular_search_results.png
            # screen38_promoted_results_listing.png
            # screen39_add_promoted_result.png
            # screen40_table_block.png
            # screen41_redirects_menu_item.png
            # screen42_redirects_interface.png
            # screen43_redirects_edit_redirect.png
            # screen_wagtail_redirects.png

            # actions = ActionChains(driver)
            # actions.send_keys("We'd ")
            # actions.perform()

            # bold = driver.find_element_by_class_name("icon-bold")
            # bold.click()
            # actions = ActionChains(driver)
            # actions.send_keys("love ")
            # actions.perform()
