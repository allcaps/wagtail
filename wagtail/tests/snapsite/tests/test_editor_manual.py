from django.contrib.auth import get_user_model
from django.contrib.staticfiles.testing import StaticLiveServerTestCase
from django.test import override_settings
from django.urls import reverse
from selenium import webdriver

from .documentation_factory import DocumentationFactory
from .driver import DriverWithShortcuts

# Minimal adjustments to the settings generated by `wagtail start snapsite`
settings = {
    "STATICFILES_FINDERS": [
        'django.contrib.staticfiles.finders.AppDirectoriesFinder',
        'django.contrib.staticfiles.finders.FileSystemFinder',
    ],
    "STATICFILES_STORAGE": 'django.contrib.staticfiles.storage.StaticFilesStorage',
    "WAGTAIL_SITE_NAME": "Acme corp",
}


class TestEditorManual(StaticLiveServerTestCase):
    @classmethod
    def setUpClass(cls):
        super().setUpClass()
        options = webdriver.ChromeOptions()
        # options.add_argument("--headless")
        options.add_argument("--no-sandbox")  # Bypass OS security model
        options.add_argument("--force-device-scale-factor=2")
        # options.add_argument("--liveserver=10.10.10.238:8000")  # Bypass OS security model

        cls.driver = DriverWithShortcuts(
            # command_executor=settings.SELENIUM_REMOTE_URL,
            desired_capabilities=webdriver.DesiredCapabilities.CHROME,
        )
        cls.driver.set_window_size(1024, 768)

    @classmethod
    def tearDownClass(cls):
        cls.driver.quit()
        super().tearDownClass()

    @override_settings(**settings)
    def test_screenshots(self):
        driver = self.driver
        base_url = self.live_server_url

        with DocumentationFactory(
                "documentation_factory_demo.rst", "Introduction", driver
        ) as doc:
            doc.comment("This RST file is for demo purposes only.")
            doc.h2("Heading level two")
            doc.p("This is a paragraph.")
            doc.ul(["Foo", "Bar", "Ni", ["This is", "a nested", "list"]])
            doc.ol(["One", "Two", "Three"])

            driver.refresh()
            driver.get(base_url)
            doc.img("home.png")

            # editor_manual/getting_started.rst
            username, password = "jane", "secret_password"
            get_user_model().objects.create_superuser(
                username=username,
                password=password,
                is_active=True,
                email=f"{username}@example.com",
            )
            assert get_user_model().objects.count() == 1
            driver.get(base_url + reverse("wagtailadmin_login"))
            driver.input_text("username", username)
            driver.input_text("password", password)
            doc.img("screen01_login.png", driver.find_element_by_xpath(f"//button"))
            driver.find_element_by_xpath(f"//button").click()

            # editor_manual/finding_your_way_around/the_dashboard.rst
            driver.get(base_url + reverse("wagtailadmin_home"))
            assert driver.current_url == base_url + reverse("wagtailadmin_home")
            doc.img("screen02_dashboard_editor.png")
